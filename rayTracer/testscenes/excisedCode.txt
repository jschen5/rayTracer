READFILE

// Process the light, add it to database.
        // Lighting Command
        /*
        if (cmd == "light") { 
          if (numused == numLights) // No more Lights 
            cerr << "Reached Maximum Number of Lights " << numused << " Will ignore further lights\n" ;
          else {
            validinput = readvals(s, 8, values) ; // Position/color for lts.
            if (validinput) {
              // YOUR CODE FOR HW 2 HERE. 
              // Note that values[0...7] shows the read in values 
              // Make use of lightposn[] and lightcolor[] arrays in variables.h
              // Those arrays can then be used in display too.  
				int lightIndex;
				for (lightIndex = 0; lightIndex < 8; lightIndex++) {
					if (lightIndex < 4) {
						lightposn[4*numused + lightIndex] = values[lightIndex];
					} else {
						lightcolor[4*numused + lightIndex-4] = values[lightIndex];
					}
				}
              ++numused ; 
            }
          }
        }*/

else if (cmd == "ambient") {
          validinput = readvals(s, 3, values) ; // colors 
          if (validinput) 
            for (i = 0 ; i < 3 ; i++) ambient[i] = values[i] ; 
        }
        else if (cmd == "diffuse") {
          validinput = readvals(s, 3, values) ; 
          if (validinput) 
            for (i = 0 ; i < 3 ; i++) diffuse[i] = values[i] ; 
        }
        else if (cmd == "specular") {
          validinput = readvals(s, 3, values) ; 
          if (validinput) 
            for (i = 0 ; i < 3 ; i++) specular[i] = values[i] ; 
        }
        else if (cmd == "emission") {
          validinput = readvals(s, 3, values) ; 
          if (validinput) 
            for (i = 0 ; i < 3 ; i++) emission[i] = values[i] ; 
        }
        else if (cmd == "shininess") {
          validinput = readvals(s, 1, values) ; 
          if (validinput) shininess = values[0] ; 
        }
        else if (cmd == "size") {
          validinput = readvals(s,2,values) ; 
          if (validinput) { width = (int) values[0] ; height = (int) values[1] ; } 
        }


// I've left the code for loading objects in the skeleton, so 
        // you can get a sense of how this works.  
        /*
        else if (cmd == "sphere" || cmd == "cube" || cmd == "teapot") {
            //cout << cmd << endl ;
          if (numobjects == maxobjects) // No more objects 
            cerr << "Reached Maximum Number of Objects " << numobjects << " Will ignore further objects\n" ; 
          else {
            validinput = readvals(s, 1, values) ; 
            if (validinput) {
              object * obj = &(objects[numobjects]) ; 
              obj -> size = values[0] ; 
              for (i = 0 ; i < 3 ; i++) {
                (obj -> ambient)[i] = ambient[i] ; 
                (obj -> diffuse)[i] = diffuse[i] ; 
                (obj -> specular)[i] = specular[i] ; 
                (obj -> emission)[i] = emission[i] ;
              }
              obj -> shininess = shininess ; 
              obj -> transform = transfstack.top() ; 
              if (cmd == "sphere") obj -> type = sphere ; 
              else if (cmd == "cube") obj -> type = cube ; 
              else if (cmd == "teapot") obj -> type = teapot ; 
            }
            ++numobjects ; 
          }
        }
        */


		for (int numTris = 0; numTris < triangles.size(); numTris++) {
                
                vec3 tri = triangles[numTris] ;
                vec3 a = vertices[tri[0]] ;
                vec3 b = vertices[tri[1]] ;
                vec3 c = vertices[tri[2]] ;

                vec3 v1 = b - a ;
                vec3 v2 = c - a ;
                vec3 N = glm::normalize(glm::cross(v1, v2)) ;


                GLfloat denom = glm::dot(p1, N) ;
                if (denom != 0) {
                    GLfloat newT = glm::dot((a - p0), N) / denom ;
                    if (newT < rec.getT()) {

                        vec3 intersect = p0 + p1*newT ;

                        /*
                        GLfloat testval1 = glm::dot(glm::cross((b-a), (intersect-a)), N) ;
                        GLfloat testval2 = glm::dot(glm::cross((c-b), (intersect-b)), N) ;
                        GLfloat testval3 = glm::dot(glm::cross((a-c), (intersect-c)), N) ;
                        if (testval1 >= 0 && testval2 >= 0 && testval3 >= 0) {
                            
                            rec.updateT(newT) ;
                            rec.updateColor(ambient) ;
                        }
                        */

                        vec3 bary = cartesianToBarycentric(a, b, c, intersect) ;
                        if ((bary.x >= 0 && bary.x <= 1) && (bary.y >= 0 && bary.y <= 1) && (bary.z >= 0 && bary.z <= 1)) {
                            rec.updateT(newT) ;
                            rec.updateColor(ambient) ;
                        }
                    }
                }
            }


rec.updateColor(rec.getColor() + intersectedTriangle.emission) ;
secRec = RayRecord(maxT, ambient) ;
vec3 secp0 = p0 + rec.getT() * p1 ;
bool isBlocked ;
GLfloat darkenFactor ;
for (int lightIdx = 0; lightIdx < lightposn.size(); lightIdx++) {
    isBlocked = false ;
    vec4 lightcoords = lightposn[lightIdx] ;
    vec3 lightcol = lightcolor[lightIdx] ;
    if (lightcoords.w == 0) {   //if directional light
        //secp1 = lightcoords.x * u + lightcoords.y * v + lightcoords.z * w ;
        //mat3 uvw = mat3(u, v, w) ;
        secp1 = vec3(lightcoords.x, lightcoords.y, lightcoords.z) ;
    } else {    //if point light
        secp1 = vec3(lightcoords.x, lightcoords.y, lightcoords.z) - secp0 ;
    }
    for (int secTriCount = 0; secTriCount < triObjects.size(); secTriCount++) {
        Triangle secDelta = triObjects[secTriCount] ;
        isBlocked = secDelta.intersectionTest(secp0 + 0.00001f * secp1, secp1, secRec) ;
        if (isBlocked) {
            break ;
        }
    }
    if (!isBlocked) {
        calculateLighting(intersectedTriangle, lightcoords, lightcol, p0 - secp0, secp0, rec) ;
        //rec.updateColor(ambient) ;
    }
}